{"version":3,"sources":["logo.svg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Code","children","style","color","opacity","wordBreak","backgroundColor","App","useState","error","setError","busy","setBusy","process","apiHost","message","version","data","setData","setMessage","setVersion","useEffect","substr","length","a","fetch","response","json","responseJson","console","log","fetchData","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAAe,MAA0B,iC,eCanCA,EAAO,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SACd,OACE,sBAAMC,MAAO,CAAEC,MAAO,MAAOC,QAAS,GAAKC,UAAW,YAAaC,gBAAiB,SAApF,SACGL,KA0EQM,MArEf,WAAiB,IAAD,EACYC,mBAAQ,IADpB,mBACPC,EADO,KACAC,EADA,OAEUF,oBAAkB,GAF5B,mBAEPG,EAFO,KAEDC,EAFC,OAGIJ,mBAAiBK,0CAA5BC,EAHO,sBAIUN,mBAAqC,CAAEO,QAAQ,GAAKC,QAAQ,KAJtE,mBAIPC,EAJO,KAIDC,EAJC,OAKgBV,mBAAQ,IALxB,mBAKPO,EALO,KAKEI,EALF,OAMgBX,mBAAQ,IANxB,mBAMPQ,EANO,KAMEI,EANF,KAuCd,OA/BAC,qBAAU,WAAO,IACPN,EADM,aACQA,QAAQ,IAAQE,GAA9BF,QACRI,EAAW,GAAD,OAAIJ,EAAQO,OAAO,EAAE,GAArB,cAA6BP,EAAQO,OAAOP,EAAQQ,OAAS,EAAGR,EAAQQ,YACjF,CAACN,IAEJI,qBAAU,WAAO,IACPL,EADM,aACQA,QAAQ,IAAQC,GAA9BD,QACRI,EAAWJ,KACV,CAACC,IAEJI,qBAAU,WAAM,4CAEd,8BAAAG,EAAA,6DACEd,EAAS,IACTE,GAAQ,GAFV,kBAI2Ba,MAAMX,GAJjC,cAIUY,EAJV,gBAK+BA,EAASC,OALxC,OAKUC,EALV,OAMIV,EAAQU,GACRhB,GAAQ,GAPZ,kDASIiB,QAAQC,IAAR,MACApB,EAAS,oBACTE,GAAQ,GAXZ,2DAFc,uBAAC,WAAD,wBAiBdmB,KAEC,CAACjB,IAGF,qBAAKkB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACxCxB,GAAQ,wCACRF,EAAMc,OAAS,GAAK,sCACd,cAAC,EAAD,UAAOR,IACZ,uBAFmB,SAGb,cAAC,EAAD,+BACN,uBAJmB,eAKP,cAAC,EAAD,UAAOC,IACnB,uBANmB,SAOb,cAAC,EAAD,UAAOF,OAEdL,EAAMc,OAAS,GAAM,4BACpB,+BAAOd,MAET,mBACEuB,UAAU,WACVI,KAAMtB,EACNuB,OAAO,SACPC,IAAI,sBAJN,oCC/DOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0f7bf0c3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\ninterface BlackwaterCreekAPIResponse {\n  message?: string;\n  version?: string;\n}\n\ntype Props = {\n  children: string\n}\n\nconst Code = ({ children }: Props) => {\n  return (\n    <code style={{ color: 'red', opacity: 0.5, wordBreak: 'break-all', backgroundColor: 'black' }}>\n      {children}\n    </code>\n  );\n}\n\nfunction App () {\n  const [error, setError] = useState<string>(``)\n  const [busy, setBusy] = useState<Boolean>(false)\n  const [apiHost] = useState<string>(process.env.REACT_APP_BLACKWATER_CREEK_API as string)\n  const [data, setData] = useState<BlackwaterCreekAPIResponse>({ message: ``, version: `` });\n  const [message, setMessage] = useState<string>(``)\n  const [version, setVersion] = useState<string>(``)\n\n  useEffect(() => {\n    const { message } = { message: ``, ...data }\n    setMessage(`${message.substr(0,8)}...${message.substr(message.length - 8, message.length)}`)\n  }, [data])\n\n  useEffect(() => {\n    const { version } = { version: ``, ...data }\n    setVersion(version)\n  }, [data])\n\n  useEffect(() => {\n\n    async function fetchData () {\n      setError(``)\n      setBusy(true)\n      try {\n        const response = await fetch(apiHost);\n        const responseJson = await response.json();\n        setData(responseJson)\n        setBusy(false)\n      } catch (error) {\n        console.log(error)\n        setError('Could not fetch!')\n        setBusy(false)\n      }\n    }\n\n    fetchData();\n\n  }, [apiHost]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        {busy && <p>busy...</p>}\n        {error.length < 1 && <p>\n          Got: <Code>{message}</Code>\n          <br />\n          From: <Code>blackwater-creek</Code>\n          <br />\n          API Version <Code>{version}</Code>\n          <br />\n          Path: <Code>{apiHost}</Code>\n        </p>}\n        {error.length > 0 && (<p>\n          <code>{error}</code>\n        </p>)}\n        <a\n          className=\"App-link\"\n          href={apiHost}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          See for yourself\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}